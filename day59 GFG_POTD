class Solution {
    public int editDistance(String s1, String s2) {
        // Code here
        int m = s1.length();
        int n = s2.length();
        int[][] dp = new int[m + 1][n + 1];

        // Initialize base cases
        for (int i = 0; i <= m; i++) {
            dp[i][0] = i;  // Deletion
        }
        for (int j = 0; j <= n; j++) {
            dp[0][j] = j;  // Insertion
        }

        // Fill the DP table
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1];  // Characters match, no operation needed
                } else {
                    dp[i][j] = 1 + Math.min(dp[i - 1][j],    // Deletion
                                            Math.min(dp[i][j - 1],    // Insertion
                                                     dp[i - 1][j - 1])); // Replacement
                }
            }
        }

        return dp[m][n];
    }
}
