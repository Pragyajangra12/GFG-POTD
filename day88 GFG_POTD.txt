class Solution {
    int time = 0;
    boolean isBridge = false;
    public boolean isBridge(int V, int[][] edges, int c, int d) {
        // code here
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) adj.add(new ArrayList<>());
        for (int[] edge : edges) {
            adj.get(edge[0]).add(edge[1]);
            adj.get(edge[1]).add(edge[0]);
        }

        int[] disc = new int[V];     // Discovery times
        int[] low = new int[V];      // Low times
        boolean[] visited = new boolean[V];

        // Run DFS from every unvisited node (in case of disconnected graph)
        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                dfs(i, -1, disc, low, visited, adj, c, d);
            }
        }

        return isBridge;
    }

    private void dfs(int u, int parent, int[] disc, int[] low, boolean[] visited,
                     List<List<Integer>> adj, int c, int d) {
        visited[u] = true;
        disc[u] = low[u] = ++time;

        for (int v : adj.get(u)) {
            if (v == parent) continue; // Skip the parent

            if (!visited[v]) {
                dfs(v, u, disc, low, visited, adj, c, d);

                low[u] = Math.min(low[u], low[v]);

                // Check if the edge (u, v) is a bridge
                if (low[v] > disc[u]) {
                    // Check if it matches the given edge (c, d) or (d, c)
                    if ((u == c && v == d) || (u == d && v == c)) {
                        isBridge = true;
                    }
                }
            } else {
                low[u] = Math.min(low[u], disc[v]); // Back edge
            }
        }
        
    }
}