class Solution {
    int[] dx = {-1, -1, -1, 0, 0, 1, 1, 1};
    int[] dy = {-1, 0, 1, -1, 1, -1, 0, 1};
    public int countIslands(char[][] grid) {
        // Code here
        if (grid == null || grid.length == 0)
            return 0;

        int n = grid.length;
        int m = grid[0].length;
        boolean[][] visited = new boolean[n][m];
        int count = 0;

        // Loop through each cell
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                // If it's land and not visited, it's a new island
                if (grid[i][j] == 'L' && !visited[i][j]) {
                    dfs(grid, visited, i, j, n, m);
                    count++;
                }
            }
        }

        return count;
    }

    // DFS to mark all connected 'L's
    private void dfs(char[][] grid, boolean[][] visited, int x, int y, int n, int m) {
        visited[x][y] = true;

        for (int dir = 0; dir < 8; dir++) {
            int newX = x + dx[dir];
            int newY = y + dy[dir];

            if (isValid(newX, newY, n, m) && grid[newX][newY] == 'L' && !visited[newX][newY]) {
                dfs(grid, visited, newX, newY, n, m);
            }
        }
    }

    // Check if the coordinates are within grid bounds
    private boolean isValid(int x, int y, int n, int m) {
        return x >= 0 && x < n && y >= 0 && y < m;
        
    }
}