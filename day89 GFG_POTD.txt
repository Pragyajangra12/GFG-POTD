class Solution {
    static int time;
    static ArrayList<Integer> articulationPoints(int V, int[][] edges) {
        // code here
        time=0;
          List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) adj.add(new ArrayList<>());
        for (int[] edge : edges) {
            int u = edge[0], v = edge[1];
            adj.get(u).add(v);
            adj.get(v).add(u);
        }

        int[] disc = new int[V];       
        int[] low = new int[V];        
        boolean[] visited = new boolean[V];
        boolean[] isArticulation = new boolean[V];
        int[] parent = new int[V];
        Arrays.fill(disc, -1);
        Arrays.fill(low, -1);
        Arrays.fill(parent, -1);

        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                dfs(i, visited, disc, low, parent, adj, isArticulation);
            }
        }

        ArrayList<Integer> result = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            if (isArticulation[i]) result.add(i);
        }

        if (result.isEmpty()) result.add(-1);
        return result;
    }

    public static void dfs(int u, boolean[] visited, int[] disc, int[] low, int[] parent,
                     List<List<Integer>> adj, boolean[] isArticulation) {
        visited[u] = true;
        disc[u] = low[u] = time++;
        int children = 0;

        for (int v : adj.get(u)) {
            if (!visited[v]) {
                parent[v] = u;
                children++;
                dfs(v, visited, disc, low, parent, adj, isArticulation);

                low[u] = Math.min(low[u], low[v]);

                if (parent[u] != -1 && low[v] >= disc[u]) {
                    isArticulation[u] = true;
                }

                if (parent[u] == -1 && children > 1) {
                    isArticulation[u] = true;
                }
            } else if (v != parent[u]) {
                low[u] = Math.min(low[u], disc[v]);
            }
        }
    }
}