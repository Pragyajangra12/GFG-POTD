
class Solution {
    static boolean equalPartition(int arr[]) {
        // code here
        int sum = Arrays.stream(arr).sum();
        
        // If sum is odd, we cannot partition into two equal subsets
        if (sum % 2 != 0) {
            return false;
        }
        
        int target = sum / 2;
        int n = arr.length;
        boolean[][] dp = new boolean[n + 1][target + 1];

        // Initialize the DP table
        for (int i = 0; i <= n; i++) {
            dp[i][0] = true;  // Sum 0 is always possible with an empty subset
        }

        // Fill the DP table
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= target; j++) {
                if (arr[i - 1] <= j) {
                    // Either include the current element or exclude it
                    dp[i][j] = dp[i - 1][j] || dp[i - 1][j - arr[i - 1]];
                } else {
                    dp[i][j] = dp[i - 1][j]; // Exclude the current element
                }
            }
        }

        return dp[n][target];
    }
    }