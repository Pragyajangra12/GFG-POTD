class Solution {
    static class Node {
        int val;
        int row;
        int col;

        Node(int val, int row, int col) {
            this.val = val;
            this.row = row;
            this.col = col;
        }
    }
    public ArrayList<Integer> findSmallestRange(int[][] arr) {
        // code here
        int k = arr.length;

        PriorityQueue<Node> minHeap = new PriorityQueue<>((a, b) -> a.val - b.val);
        int max = Integer.MIN_VALUE;

        // Initialize the heap with the first element of each row
        for (int i = 0; i < k; i++) {
            int val = arr[i][0];
            minHeap.add(new Node(val, i, 0));
            max = Math.max(max, val);
        }

        int rangeStart = 0, rangeEnd = Integer.MAX_VALUE;

        while (minHeap.size() == k) {
            Node curr = minHeap.poll();
            int min = curr.val;

            // Update the range
            if (max - min < rangeEnd - rangeStart) {
                rangeStart = min;
                rangeEnd = max;
            }

            // Move to the next element in the same row
            if (curr.col + 1 < arr[curr.row].length) {
                int nextVal = arr[curr.row][curr.col + 1];
                minHeap.add(new Node(nextVal, curr.row, curr.col + 1));
                max = Math.max(max, nextVal);
            } else {
                // One list is exhausted
                break;
            }
        }

        ArrayList<Integer> result = new ArrayList<>();
        result.add(rangeStart);
        result.add(rangeEnd);
        return result;
    }
}
