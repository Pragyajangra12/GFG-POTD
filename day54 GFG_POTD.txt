Longest String Chain
Difficulty: MediumAccuracy: 50.0%Submissions: 24K+Points: 4Average Time: 20m
You are given an array of words where each word consists of lowercase English letters.
wordA is a predecessor of wordB if and only if we can insert exactly one letter anywhere in wordA without changing the order of the other characters to make it equal to wordB. For example, "abc" is a predecessor of "abac", while "cba" is not a predecessor of "bcad".

A word chain is a sequence of words [word1, word2, ..., wordk] with k >= 1, where word1 is a predecessor of word2, word2 is a predecessor of word3, and so on. A single word is trivially a word chain with k = 1.

Return the length of the longest possible word chain with words chosen from the given list of words in any order.
SOLUTION:
class Solution {
    public int longestStringChain(String words[]) {
        // code here
        Arrays.sort(words, (a, b) -> a.length() - b.length());

        // Map to store the longest chain ending with a specific word
        Map<String, Integer> dp = new HashMap<>();
        int longestChain = 1;

        // Iterate through each word
        for (String word : words) {
            // For the current word, try removing one character at a time
            dp.put(word, 1); // Every word is at least a chain of length 1 (itself)
            for (int i = 0; i < word.length(); i++) {
                // Create a predecessor by removing one character
                String predecessor = word.substring(0, i) + word.substring(i + 1);
                if (dp.containsKey(predecessor)) {
                    // Update the longest chain that ends with the current word
                    dp.put(word, Math.max(dp.get(word), dp.get(predecessor) + 1));
                }
            }
            // Update the overall longest chain
            longestChain = Math.max(longestChain, dp.get(word));
        }

        return longestChain;
    }
}