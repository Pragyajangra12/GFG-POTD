static class TrieNode {
        TrieNode[] children = new TrieNode[2]; 
    }

    private void insert(TrieNode root, int num) {
        TrieNode current = root;
        for (int i = 20; i >= 0; i--) { 
            int bit = (num >> i) & 1;
            if (current.children[bit] == null) {
                current.children[bit] = new TrieNode();
            }
            current = current.children[bit];
        }
    }

    private int getMaxXor(TrieNode root, int num) {
        TrieNode current = root;
        int maxXor = 0;
        for (int i = 20; i >= 0; i--) {
            int bit = (num >> i) & 1;
            int oppositeBit = bit ^ 1;
            if (current.children[oppositeBit] != null) {
                maxXor |= (1 << i);
                current = current.children[oppositeBit];
            } else {
                current = current.children[bit];
            }
        }
        return maxXor;
    }

public int maxXor(int[] arr) {
        
        TrieNode root = new TrieNode();
        int maxResult = 0;

        insert(root, arr[0]);

        for (int i = 1; i < arr.length; i++) {
            maxResult = Math.max(maxResult, getMaxXor(root, arr[i]));
            insert(root, arr[i]);
        }

        return maxResult;
    }
}
