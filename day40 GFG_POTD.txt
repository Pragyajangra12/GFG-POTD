Merge K sorted linked lists
Difficulty: MediumAccuracy: 57.01%Submissions: 95K+Points: 4Average Time: 60m
Given an array arr[] of n sorted linked lists of different sizes. The task is to merge them in such a way that after merging they will be a single sorted linked list, then return the head of the merged linked list.
SOLUTION:
class Solution {
    // Function to merge K sorted linked list.
    Node mergeKLists(List<Node> arr) {
        // Add your code here.
        PriorityQueue<Node> pq=new PriorityQueue<>((a,b)->a.data-b.data);
        if(arr==null || arr.size()==0) return null;
        for(Node node:arr){
            if(node!=null){
                pq.add(node);
            }
        }
        Node dummy = new Node(-1);
        Node tail = dummy;

        // Process the heap
        while (!pq.isEmpty()) {
            Node minNode = pq.poll();
            tail.next = minNode;
            tail = minNode;

            // If there is a next node, push it into the heap
            if (minNode.next != null) {
                pq.add(minNode.next);
            }
        }

        return dummy.next;
    }
}