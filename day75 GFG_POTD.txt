class Solution {
    public boolean wordBreak(String s, String[] dictionary) {
        // code here
         Set<String> wordSet = new HashSet<>(Arrays.asList(dictionary));
        int n = s.length();
        boolean[] dp = new boolean[n + 1];
        dp[0] = true; // Empty string is always a valid split

        // Find max word length to limit inner loop iterations
        int maxWordLength = 0;
        for (String word : dictionary) {
            maxWordLength = Math.max(maxWordLength, word.length());
        }

        for (int i = 1; i <= n; i++) {
            // Check only last `maxWordLength` characters
            for (int j = Math.max(0, i - maxWordLength); j < i; j++) {
                if (dp[j] && wordSet.contains(s.substring(j, i))) {
                    dp[i] = true;
                    break; // Stop further checks
                }
            }
        }

        return dp[n];
    }
}