Longest Palindrome in a String
Difficulty: MediumAccuracy: 23.2%Submissions: 322K+Points: 4
Given a string s, your task is to find the longest palindromic substring within s.

A substring is a contiguous sequence of characters within a string, defined as s[i...j] where 0 ≤ i ≤ j < len(s).

A palindrome is a string that reads the same forward and backward. More formally, s is a palindrome if reverse(s) == s.

Note: If there are multiple palindromic substrings with the same length, return the first occurrence of the longest palindromic substring from left to right.
SOLUTION:
class Solution {
    static String longestPalindrome(String s) {
        // code here
            if (s == null || s.length() == 0) {
            return "";
        }
        
        int start = 0; // To track the starting index of the longest palindrome
        int maxLength = 1; // Initially, the longest palindrome length is 1 (a single character)
        
        // Iterate over each character to check both odd-length and even-length palindromes
        for (int i = 0; i < s.length(); i++) {
            // Check for odd-length palindromes (centered at i)
            int len1 = expandAroundCenter(s, i, i);
            // Check for even-length palindromes (centered between i and i+1)
            int len2 = expandAroundCenter(s, i, i + 1);
            
            // Get the maximum of the two lengths
            int len = Math.max(len1, len2);
            
            // If we found a longer palindrome, update maxLength and start
            if (len > maxLength) {
                maxLength = len;
                start = i - (len - 1) / 2; // Update start index for the longest palindrome
            }
        }
        
        // Return the longest palindromic substring
        return s.substring(start, start + maxLength);
    }
    
    // Helper function to expand around the center and return the length of the palindrome
    private static int expandAroundCenter(String s, int left, int right) {
        // Expand outwards as long as the characters at left and right are equal
        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            left--;
            right++;
        }
        return right - left - 1; // The length of the palindrome is the difference between right and left
    }
}