Longest Common Subsequence
Difficulty: MediumAccuracy: 41.68%Submissions: 304K+Points: 4
Given two strings s1 and s2, return the length of their longest common subsequence (LCS). If there is no common subsequence, return 0.

A subsequence is a sequence that can be derived from the given string by deleting some or no elements without changing the order of the remaining elements. For example, "ABE" is a subsequence of "ABCDE".
SOLUTION:
class Solution {
    static int lcs(String s1, String s2) {
        // code here
         int m = s1.length();
        int n = s2.length();
        
        // Create a 2D DP array with size (m+1) x (n+1)
        int[][] dp = new int[m + 1][n + 1];
        
        // Build the dp table
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                // If characters match, increment the LCS length by 1
                if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    // Otherwise, take the maximum of the previous row or column value
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        
        // The value at dp[m][n] will contain the length of the LCS
        return dp[m][n];
    }
}