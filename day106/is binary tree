class Solution {
     int countNodes(Node root) {
        if (root == null) return 0;
        return 1 + countNodes(root.left) + countNodes(root.right);
    }
      boolean isComplete(Node root, int index, int totalNodes) {
        if (root == null) return true;
        if (index >= totalNodes) return false;
        
        return isComplete(root.left, 2 * index + 1, totalNodes) &&
               isComplete(root.right, 2 * index + 2, totalNodes);
    }
    boolean isHeapProperty(Node root) {
        // Leaf node
        if (root.left == null && root.right == null) return true;
        
        // Node with only left child
        if (root.right == null) {
            return (root.data >= root.left.data) && isHeapProperty(root.left);
        } else {
            // Node with two children
            return (root.data >= root.left.data) && (root.data >= root.right.data) &&
                    isHeapProperty(root.left) && isHeapProperty(root.right);
        }
    }
    boolean isHeap(Node tree) {
        // code here
        int totalNodes = countNodes(tree);
        return isComplete(tree, 0, totalNodes) && isHeapProperty(tree);
    }
}
