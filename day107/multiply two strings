class Solution {
    public String multiplyStrings(String s1, String s2) {
        // code here.
        if (s1 == null || s2 == null || s1.isEmpty() || s2.isEmpty()) {
            return "0";
        }

        // Determine the sign
        boolean isNegative = false;
        if (s1.charAt(0) == '-') {
            isNegative = !isNegative;
            s1 = s1.substring(1);
        }
        if (s2.charAt(0) == '-') {
            isNegative = !isNegative;
            s2 = s2.substring(1);
        }

        // Remove leading zeros
        s1 = removeLeadingZeros(s1);
        s2 = removeLeadingZeros(s2);

        // If any number becomes 0 after removing zeros
        if (s1.equals("0") || s2.equals("0")) {
            return "0";
        }

        int m = s1.length();
        int n = s2.length();
        int[] result = new int[m + n];

        // Multiply each digit
        for (int i = m - 1; i >= 0; i--) {
            for (int j = n - 1; j >= 0; j--) {
                int mul = (s1.charAt(i) - '0') * (s2.charAt(j) - '0');
                int sum = mul + result[i + j + 1];

                result[i + j + 1] = sum % 10;
                result[i + j] += sum / 10;
            }
        }

        // Build the result string
        StringBuilder sb = new StringBuilder();
        for (int num : result) {
            if (sb.length() != 0 || num != 0) { // Skip leading zeros
                sb.append(num);
            }
        }

        // Add negative sign if needed
        if (isNegative) {
            sb.insert(0, '-');
        }

        return sb.toString();
    }

    private static String removeLeadingZeros(String s) {
        int i = 0;
        while (i < s.length() - 1 && s.charAt(i) == '0') {
            i++;
        }
        return s.substring(i);
    }
}
