class Solution {
    // Function to return Breadth First Search Traversal of given graph.
    public ArrayList<Integer> bfs(ArrayList<ArrayList<Integer>> adj) {
        // code here
         ArrayList<Integer> bfsTraversal = new ArrayList<>();
        if (adj.isEmpty()) return bfsTraversal;
        
        int V = adj.size(); // Number of vertices
        boolean[] visited = new boolean[V];
        Queue<Integer> queue = new LinkedList<>();
        
        // Start BFS from vertex 0
        queue.add(0);
        visited[0] = true;
        
        while (!queue.isEmpty()) {
            int node = queue.poll();
            bfsTraversal.add(node);
            
            // Traverse all adjacent nodes in the given order
            for (int neighbor : adj.get(node)) {
                if (!visited[neighbor]) {
                    queue.add(neighbor);
                    visited[neighbor] = true;
                }
            }
        }
        
        return bfsTraversal;
    }
}