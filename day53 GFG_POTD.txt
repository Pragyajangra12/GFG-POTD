Longest Increasing Subsequence
Difficulty: MediumAccuracy: 32.8%Submissions: 335K+Points: 4
Given an array arr[] of non-negative integers, the task is to find the length of the Longest Strictly Increasing Subsequence (LIS).

A subsequence is strictly increasing if each element in the subsequence is strictly less than the next element.
SOLUTION:
class Solution {
    static int lis(int arr[]) {
        // code here
        if(arr==null || arr.length==0){
            return 0;
        }
        int n=arr.length;
        int[] dp=new int[n];
        for(int i=0;i<n;i++){
            dp[i]=1;
        }
        for(int i=1;i<n;i++){
            for(int j=0;j<i;j++){
                if(arr[i]>arr[j]){
                    dp[i]=Math.max(dp[i],dp[j]+1);
                }
            }
        }
        int maxLength=0;
        for(int i=0;i<n;i++){
            maxLength=Math.max(maxLength,dp[i]);
        }
        return maxLength;
    }
}